name: ARO Store Demo

trigger: none
variables:
  bicepfolder: '$(System.DefaultWorkingDirectory)/bicep'
  resourceGroupName: 'myrg'
  templateFile: '$(System.DefaultWorkingDirectory)/bicep/module.bicep'
  parametersFile: '$(System.DefaultWorkingDirectory)/bicep/parameters.json'
  imageRepository: 'rigamortus'
  tag: '$(Build.BuildId)'

parameters:
- name: APPLY
  type: string
  default: 'no'
  values:
    - 'yes'
    - 'no'
# - name: dockerfiles
#   type: object
#   default: 
pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: BicepInfrastructureScan
    condition: eq(variables['APPLY'], 'yes')
    jobs:
      - job: BicepScan
        displayName: Scan and Run What-If
        steps:
        - task: RunARMTTKTestsXPlat@1
          continueOnError: true
          inputs:
            templatelocation: $(bicepfolder)
            resultLocation: '$(System.DefaultWorkingDirectory)/results'
            allTemplatesMain: false
            cliOutputResults: true
            ignoreExitCode: false
        - task: PublishTestResults@2
          displayName: Publish Results
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '$(System.DefaultWorkingDirectory)/results/*-armttk.xml'
          condition: always()
        - task: PublishBuildArtifacts@1
          displayName: 'Publish SARIF Logs'
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/results'
            ArtifactName: 'CodeAnalysisLogs'
            publishLocation: 'Container'

        - task: AzureCLI@2
          displayName: BicepWhatIf
          inputs:
            azureSubscription: 'Visual Studio Enterprise Subscription – MPN(01865a64-1974-4037-8780-90e5bebf910e)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az --version
              az deployment group what-if --resource-group $(resourceGroupName) --template-file $(templateFile) --parameters @$(parametersFile)
    
  - stage: BicepDeploy
    #dependsOn: [BicepInfrastructureScan]
    condition: eq(variables['APPLY'], 'yes')
    jobs:
      - job: waitForValidation
        displayName: Wait for external validation
        pool: server
        timeoutInMinutes: 60 # job times out in one hour
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 30 # task times out in 1 day
          inputs:
            notifyUsers: 'dakalugo@infinion.co'
            instructions: 'Please validate the build $(Build.BuildId) configuration and resume'
            onTimeout: 'resume'
      - job: deployAzure
        displayName: deploy bicep to Azure
        pool:
          vmImage: 'ubuntu-latest'
        dependsOn: [waitForValidation]
        steps:
          - task: AzureCLI@2
            displayName: Deploy of Bicep Infrastructure
            inputs:
              azureSubscription: 'Visual Studio Enterprise Subscription – MPN(01865a64-1974-4037-8780-90e5bebf910e)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az --version
                az deployment group create --resource-group $(resourceGroupName) --template-file $(templateFile) --parameters @$(parametersFile)
  
  - stage: DockerBuild
    #dependsOn: BicepDeploy
    #dependsOn: BicepInfrastructureScan
    condition: always()
    jobs:
      - job: SonarAnalysis
        displayName: Perform Sonar Cloud Analysis
        steps:
        - checkout: self
          fetchDepth: '0'
        - task: SonarCloudPrepare@3
          inputs:
            SonarQube: 'sonar'
            organization: 'devsecopssandbox'
            scannerMode: 'cli'
            configMode: 'file'
        - task: SonarCloudAnalyze@3
          inputs:
            jdkversion: 'JAVA_HOME_17_X64'
        - task: SonarCloudPublish@3
          inputs:
            pollingTimeoutSec: '300'
        #- task: dependency-check-build-task@6
        #  inputs:
        #    projectName: 'ARO-Project'
        #    scanPath: '$(Build.SourcesDirectory)/images/**'
        #    format: 'ALL'
        #    uploadReports: true
        #    uploadSARIFReport: true
        #    failOnCVSS: '7'
        #    reportsDirectory: '$(Build.ArtifactStagingDirectory)/dependency-check-reports'
            #nvdApiKey: $(NVD_KEY)

        - script: |
            find images/**/ -name Dockerfile > dockerfiles.txt
          displayName: 'Find all Dockerfiles'

        - script: |
            while IFS= read -r dockerfile; do
              imageName=$(basename $(dirname "$dockerfile"))
              echo "##vso[task.setvariable variable=currentDockerfile]$dockerfile"
              echo "##vso[task.setvariable variable=imageName;isOutput=true]$imageName"
            done < dockerfiles.txt
          displayName: 'Process Dockerfiles'

        - task: Docker@2
          displayName: 'Build Docker image'
          inputs:
            containerRegistry: 'docker'
            repository: '$(imageRepository)/$(imageName)'
            command: 'build'
            Dockerfile: '$(currentDockerfile)'
            tags: '$(tag)'
        
        - task: SnykSecurityScan@1
          displayName: 'Snyk scan'
          inputs:
            serviceConnectionEndpoint: 'snyk'
            testType: 'container'
            dockerImageName: 'rigamortus/$(imageName):$(tag)'
            severityThreshold: 'medium'
            monitorWhen: 'always'
            failOnIssues: true
            projectName: 'rigamortus'
            organization: 'ARO-PROJECT'
